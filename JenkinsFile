node {
    def WORKSPACE = "/var/lib/jenkins/workspace/todo-management-spring-boot"
    def dockerImageTag = "todo-management-spring-boot${env.BUILD_NUMBER}"

    try{

        //notifyBuild('STARTED')
        stage('Clone Repo') {
            // for display purposes
            // Get some code from a GitHub repository

            git url: 'https://github.com/rinkuls/todo-management-spring-boot.git',
                    credentialsId: 'springdeploy-user',
                    branch: 'main'
        }
        stage('Build') {
            bat "mvn clean install"
        }

         stage('Build docker image') {
                         dockerImage = docker.build("todo-management-spring-boot:${env.BUILD_NUMBER}")
                  }

  /*
          stage('Deploy docker'){
                   echo "Docker Image Tag Name: ${dockerImageTag}"
                   bat  "docker stop db-application || true"
                   bat  " docker rm db-application || true"
                   echo "removed successful"
                   bat  "docker run --name db-application -d -p 8781:8781 todo-management-spring-boot:${env.BUILD_NUMBER}"
                   echo "run successful"
             }*/


        /* can we used directly this stage and skip build and deploy separately but for learning purpose i did this
         stage('Docker Compose Up') {
                bat 'docker --version'
               bat  "docker stop DB-Application || true"
               bat  " docker rm DB-Application || true"
               echo "removed successful"
               bat  "docker-compose -f docker-compose.yml up -d"
               echo "composed successful"
           } */
        stage('Push to Minikube') {

        // Tag and push the Docker image to Minikube's Docker daemon
                if (isUnix()) {
                // For Linux/macOS
                sh 'eval $(minikube docker-env)' // Configure Docker CLI to use Minikube
                } else {
                 echo 'in else'
                // For Windows (PowerShell)
                   // For Windows (CMD)
                                         bat '''
                                         @echo off
                                         FOR /F "tokens=*" %%i IN ('minikube docker-env --shell cmd') DO @call %%i
                                         '''
                                  }
 echo 'done else'
  bat "docker tag todo-management-spring-boot:${env.BUILD_NUMBER} todo-management-spring-boot:latest"

 // bat "docker tag todo-management-spring-boot:${env.BUILD_NUMBER}:latest todo-management-spring-boot:${env.BUILD_NUMBER}:latest"

        }

        stage('kubectl deploy') {

        // Deploy the Docker image to Minikube using kubectl
                bat 'kubectl apply -f app-deployment.yaml' // Adjust path as needed
                bat 'kubectl apply -f app-service.yaml' // Adjust path as needed

        }
 echo 'Deployment to Minikube was successful!'
    }catch(e){
        echo "in catch"
        currentBuild.result = "FAILED"
        notifyBuild(currentBuild.result)
        throw e

    }finally{
        echo "in finally"

    }
}

def notifyBuild(String buildStatus = 'STARTED'){

// build status of null means successful
    buildStatus =  buildStatus ?: 'SUCCESSFUL'
    // Default values
    def colorName = 'RED'
    def colorCode = '#FF0000'
    def now = new Date()
    // message
    def subject = "${buildStatus}, Job: ${env.JOB_NAME} FRONTEND - Deployment Sequence: [${env.BUILD_NUMBER}] "
    def summary = "${subject} - Check On: (${env.BUILD_URL}) - Time: ${now}"
    def subject_email = "Spring boot Deployment"
    def details = """<p>${buildStatus} JOB </p>
    <p>Job: ${env.JOB_NAME} - Deployment Sequence: [${env.BUILD_NUMBER}] - Time: ${now}</p>
    <p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME}</a>"</p>"""


    // Email notification
    emailext (
            to: "rinkulsharma123@gmail.com",
            subject: subject_email,
            body: details,

    )
}