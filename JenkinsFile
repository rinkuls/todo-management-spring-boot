node {
    def WORKSPACE = "/var/lib/jenkins/workspace/todo-management-spring-boot"
    def dockerImageTag = "todo-management-spring-boot:${env.BUILD_NUMBER}"

    try {
        // Stage to clone the repository
        stage('Clone Repo') {
            git url: 'https://github.com/rinkuls/todo-management-spring-boot.git',
                credentialsId: 'springdeploy-user',
                branch: 'main'
        }

        // Build the application
        stage('Build') {
            bat "mvn clean install"
        }

        // Build Docker image
        stage('Build Docker') {
            if (isUnix()) {
                sh 'eval $(minikube docker-env)' // For Linux/macOS
            } else {
                bat '''
                @echo off
                FOR /F "tokens=*" %%i IN ('minikube docker-env --shell cmd') DO @call %%i
                '''
            }
            echo "Docker Image Tag Name: ${dockerImageTag}"
            dockerImage = docker.build(dockerImageTag) // Building with the specific tag
        }

        // Push to Minikube
        stage('Push to Minikube') {
            if (isUnix()) {
                sh 'eval $(minikube docker-env)' // For Linux/macOS
            } else {
                bat '''
                @echo off
                FOR /F "tokens=*" %%i IN ('minikube docker-env --shell cmd') DO @call %%i
                '''
            }

            echo 'Tagging and pushing the Docker image to Minikube...'
            bat "docker tag ${dockerImageTag} ${dockerImageTag}" // Use the tagged image name
        }

        // Deploy to Kubernetes
        stage('kubectl deploy') {
            echo 'Deploying to Kubernetes...'
            bat 'kubectl apply -f app-deployment.yaml'
            bat 'kubectl apply -f app-service.yaml'
        }

        echo 'Deployment to Minikube was successful!'
    } catch (e) {
        echo "in catch"
        currentBuild.result = "FAILED"
        echo "Error: ${e.message}"
        notifyBuild(currentBuild.result)
        throw e
    } finally {
        echo "in finally"
    }
}

def notifyBuild(String buildStatus = 'STARTED') {
    buildStatus = buildStatus ?: 'SUCCESSFUL'
    def colorName = 'RED'
    def colorCode = '#FF0000'
    def now = new Date()
    def subject = "${buildStatus}, Job: ${env.JOB_NAME} FRONTEND - Deployment Sequence: [${env.BUILD_NUMBER}] "
    def summary = "${subject} - Check On: (${env.BUILD_URL}) - Time: ${now}"
    def subject_email = "Spring Boot Deployment"
    def details = """<p>${buildStatus} JOB </p>
    <p>Job: ${env.JOB_NAME} - Deployment Sequence: [${env.BUILD_NUMBER}] - Time: ${now}</p>
    <p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME}</a>"</p>"""

    // Email notification
    emailext(
        to: "rinkulsharma123@gmail.com",
        subject: subject_email,
        body: details,
    )
}
